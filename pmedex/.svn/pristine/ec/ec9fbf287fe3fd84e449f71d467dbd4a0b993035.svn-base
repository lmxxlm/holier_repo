package com.danrong.pmedex.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.danrong.medex.bean.SearchParams;
import com.danrong.medex.configure.JSTLField;
import com.danrong.medex.configure.MedexConfigure;
import com.danrong.medex.configure.SessionField;
import com.danrong.medex.module.SendMessageCallBackImpl;
import com.danrong.medex.module.SendMessageImpl;
import com.danrong.medex.module.v2.message.V2MessageMap;
import com.danrong.medex.module.v2.message.V2MessageModule;
import com.danrong.medex.module.v2.message.V2MessageModuleImpl;
import com.danrong.medex.module.v2.message.V2MessageType;
import com.danrong.medex.module.v2.order.V2OrderModule;
import com.danrong.medex.module.v2.order.V2OrderModuleImpl;
import com.danrong.medex.util.AccountGenerater;
import com.danrong.medex.util.MedexToken;
import com.danrong.medex.util.MessageUtil;
import com.danrong.medex.util.SessionParser;
import com.danrong.medex.util.TokenGenerater;
import com.danrong.medex.util.v2.OrderSearchQuery;
import com.danrong.medex.util.v2.V2OrderStatus;
import com.danrong.medex.util.v2.V2OrderType;
import com.danrong.medex.util.v2.V2PhoneMessageTemplate;
import com.danrong.medex.util.v2.V2Reward;
import com.danrong.medex.util.v2.V2TableFieldName;
import com.dr.core.util.TimeUtil;

@Controller
public class NewOrderManagementController {

  @Value("#{properties['pmedex.web.host']}")
  public String mainUrl;
  private final SessionParser sessionParser = new SessionParser();
  private final TimeUtil timeUtil = new TimeUtil();
  private final MedexToken medexToken = new MedexToken();
  private final V2OrderModule v2OrderModule = new V2OrderModuleImpl();
  private final V2MessageModule v2MessageModule = new V2MessageModuleImpl();

  @RequestMapping(value = "/newOrderManager")
  public ModelAndView newOrderManager(@ModelAttribute SearchParams param, HttpServletRequest request) {
    ModelAndView view = new ModelAndView();
    view.addObject("menuIndex", "newOrderManager");
    view.setViewName("newOrderManager");
    view.addObject(JSTLField.mainUrl, mainUrl.trim());

    String token = TokenGenerater.generateToken(AccountGenerater.generateHexString());
    view.addObject(SessionField.token, token);
    sessionParser.setSession(request, SessionField.token, token);

    // 获取订单列表数据
    OrderSearchQuery query = new OrderSearchQuery();
    query.setCp(param.getCp());
    query.setPs(param.getPs());
    query.setStatus(V2OrderStatus.pass);

    List<Map<String, Object>> orderlist = v2OrderModule.getOrderList(query);
    if (orderlist == null || orderlist.isEmpty()) view.addObject("noOrder", true);
    view.addObject("orderlist", orderlist);
    view.addObject("page", param);
    return view;
  }

  @RequestMapping(value = "completeById.do")
  @ResponseBody
  public boolean completeById(String order_id, HttpServletRequest request, HttpServletResponse response) {
    String token = TokenGenerater.generateToken(AccountGenerater.generateHexString());
    boolean result = false;

    // token 验证
    if (medexToken.matchToken(request) == MedexToken.code_mismatch) {
      result = false;
    } else {
      Map<String, Object> order = new HashMap<>();
      order.put(V2TableFieldName.order_id, order_id);
      order.put(V2TableFieldName.status, V2OrderStatus.complete);
      result = v2OrderModule.update(order);
      if (result) {
        Map<String, Object> orderDetail = v2OrderModule.getOrderDetail(order_id);
        // 增加进度
        Map<String, Object> progress = new HashMap<>();
        progress.put("orderid", order_id);
        progress.put("order_type", V2OrderType.ss.toString());
        progress.put("progress", V2OrderStatus.complete);
        progress.put("time", timeUtil.now2l());

        Map<String, Object> reward = new HashMap<>();
        reward.put("accountId", orderDetail.get(V2TableFieldName.lower_doctor_id));
        reward.put("amount", V2Reward.ss_upload_image);
        reward.put("pay", false);

        progress.put("reward", reward);
        v2OrderModule.complete(progress);
        // 完成订单给医生和患者生成消息
        String patient_name = (String) orderDetail.get(V2TableFieldName.patient_name);
        String lower_doctor_id = (String) orderDetail.get(V2TableFieldName.lower_doctor_id);
        String message_to_lower_doctor = patient_name + "患者的订单" + order_id + "已完成，金币已充值到您的账户！请查收";
        v2MessageModule.addMessage(new V2MessageMap(lower_doctor_id, MedexConfigure.destDoctor,
            message_to_lower_doctor, V2MessageType.order));

        String patient_id = (String) orderDetail.get(V2TableFieldName.patient_id);
        String message_to_patient = "订单" + order_id + "已完成。";
        v2MessageModule.addMessage(new V2MessageMap(patient_id, MedexConfigure.destPatient, message_to_patient,
            V2MessageType.order));

        // 给医生发短信
        String phone_message = V2PhoneMessageTemplate.template.get("v2_06");
        List<String> values = new ArrayList<>();
        values.add(patient_name);
        values.add(order_id);

        phone_message = MessageUtil.replace(phone_message, values);
        new Thread(new SendMessageImpl(lower_doctor_id, phone_message, new SendMessageCallBackImpl())).start();
      }
    }
    // 重置session
    sessionParser.setSession(request, SessionField.token, token);
    return result;
  }
}
